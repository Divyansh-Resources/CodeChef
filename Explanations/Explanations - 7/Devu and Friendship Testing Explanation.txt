Devu has n weird friends. Its his birthday today, so they thought that this is the best occasion for testing their friendship with him. 
They put up conditions before Devu that they will break the friendship unless he gives them a grand party on their chosen day. 
Formally, ith friend will break his friendship if he does not receive a grand party on dith day. 
Devu despite being as rich as Gatsby, is quite frugal and can give at most one grand party daily. Also, he wants to invite only one person in a party. 
So he just wonders what is the maximum number of friendships he can save. Please help Devu in this tough task !! 

----------------------------------------------------------------

Given an array, find the number of distinct elements ...

The naive way is to maintain another array  ... Insert an element into the new array if it is not already present in the first array and then output the size of the new array

This is O(n) for each insertion.

A better way is to do it using a binary search tree ! That would take O(log n) for each insertion !

However, we do not have to worry about implementing the tree ourselves ... The C++ set container is implemented as a balanced tree.
It inserts a new element only if it isn't already there. O(log n) time for each insertion. Output the size of the set at the end of all insertions.

(Another way to do it would be to build a frequency table and then iterate over it ... This is technically faster since it takes O(n) time ...
 However O(n) memory is not recommendable. It is only possible because the constraints are possible and each A(i) is at most 10^2 ... 
If it was 10^10, then it wouldn't be possible. The sorting or tree approach would still work though !
Also possible to sort the list
and count the number of times, A(i-1) < A(i) < A(i + 1) ... This is also an O(N log n) solution because it is dominated by the sorting. 
However, using a powerful new data structure is the most elegant approach !)

-------------------------------------------------------------

void solve()
{
    int no_of_friends;
    set <int> saved_friendships;
    scanf("%d", &no_of_friends);

    for(int i = 1; i <= no_of_friends; i++)
    {
        int day_i;
        scanf("%d", &day_i);

        saved_friendships.insert(day_i);
    }

    printf("%d\n", saved_friendships.size());
}