Lapindrome is defined as a string which when split in the middle, gives two halves having the same characters and same frequency of each character. 
If there are odd number of characters in the string, we ignore the middle character and check for lapindrome. 
For example gaga is a lapindrome, since the two halves ga and ga have the same characters with same frequency. 
Also, abccab, rotor and xyzxy are a few examples of lapindromes. Note that abbaab is NOT a lapindrome. 
The two halves contain the same characters but their frequencies do not match. 
Your task is simple. Given a string, you need to tell if it is a lapindrome.

------------------------------------------------------------------------

Keep track of the frequency of each character in the first half and each in the second half and then compare them ...

Instead of doing that ... I used one frequency table to keep track of frequency of each character. In the first half, the frequency is increase, in the second half, 
it's decreased.

At the end, the frequency of every character must be zero for it to be a lapindrome.

Since, we know each character is an alphabet. Possible to do it with an array of length 26 ... But, I used a map to keep things easier and save space.
Insertion and updating will happen in O(N log N) time instead of O(1) time but no extra space is used ... And at the end O(N) time is required to check if each value is 0.

-------------------------------------------------------

void solve()
{
    char sequence[MAX_LENGTH];
    scanf("%s", sequence);

    map <char, int> frequency;
    for(int front_i = 0, back_i = strlen(sequence) - 1; front_i < back_i; front_i++, back_i--)
    {
        frequency[ sequence[front_i] ]++;
        frequency[ sequence[back_i] ]--;
    }

    bool is_lapindrome = true;

    map <char, int> :: iterator it;
    for(it = frequency.begin(); it != frequency.end(); it++)
    {
        int frequency_i = it->second;

        if(frequency_i != 0)
        {
            is_lapindrome = false;
            break;
        }
    }

    printf(is_lapindrome ? "YES\n" : "NO\n");
}