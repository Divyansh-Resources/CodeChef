You are given two positive integers – A and B. You have to check whether A is divisible by all the prime divisors of B.

------------------------------------------------------------------

Collect the product of all prime factors of a number i.

It is not possible to precompute primes because n can be 1e18 ... in that case, it may have prime factors less than it's square root up to 1e9.

We need all primes till 1e9, but we can't have arrays that big ... Fortunately, we can factorise each n we get and it will pass the time limit.

While performing prime factorisation, divide n by all numbers up to it's square root ... Remember to check it n > 1 after all of it ... If it is, then it means it has
1 prime factor greater than it's square root. (A number can have only 1 prime factor greater than it's square root).

---------------------------------------------------------

long long reduce_num(long long n)
{
    long long prime_factors_n = 1LL;

    for(int i = 2; i*i <= n; i++)
    {
        if(n%i == 0)
        {
            while(n%i == 0)
            {
                n = n/i;
            }

            prime_factors_n *= i;
        }
    }

    if(n > 1) //1 factor greater than it's square root
        prime_factors_n *= n;

    return prime_factors_n;
}

void solve()
{
    long long a, b;
    scanf("%lld %lld", &a, &b);
    b = reduce_num(b);

    printf(a >= b && a%b == 0 ? "Yes\n" : "No\n");
}