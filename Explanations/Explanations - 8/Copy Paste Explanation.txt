You had an array of integer numbers. 
You also had a beautiful operations called "Copy-Paste" which allowed you to copy any contiguous subsequence of your array and paste it in any position of your array. 
For example, if you have array [1, 2, 3, 4, 5] and copy it's subsequence from the second to the fourth element and paste it after the third one, 
then you will get [1, 2, 3, 2, 3, 4, 4, 5] array. 
You remember that you have done a finite(probably zero) number of such operations over your initial array and got an array A as a result. 
Unfortunately you don't remember the initial array itself, so you would like to know what could it be. You are interested by the smallest such array. 
So the task is to find the minimal size(length) of the array that A can be obtained from by using "Copy-Paste" operations.

--------------------------------------

I nearly gave up because I misinterpreted the question... I thought it was ... Given K operations, reconstruct original array.
No of operations is not given. 

It's actually the number of distinct elements in a set !

Let's say we have distinct elements in a set S ... We can copy and paste the elements, and make any other sequence from it, by pasting one element at a time !

1, 1, 3, 2, 3, We can reach here from 1, 2, 3 ... By copying 1 and then 3.

Used a set to count no of distinct elements. Another way to do this would be to keep a sorted array and then insert only if it doesn't exist. Balanced tree is more efficient.

O(N log N) vs O(N)

------------------------------------------

void solve()
{
    int no_of_elements, element_i;
    scanf("%d", &no_of_elements);

    set <int> initial_array;
    for(int i = 1; i <= no_of_elements; i++)
    {
        scanf("%d", &element_i);
        initial_array.insert(element_i);
    }

    printf("%u\n", initial_array.size());
}