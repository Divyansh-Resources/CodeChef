Given a sequence of n distinct numbers a[1..n], we want to sort them in an ascending order.

An interesting property of some sequences is that all numbers are almost at their correct position! 
More formally, the distance between the current position of any value is at most 1 from its correct position in a sorted order.

Now, you want to verify whether the input sequence has such a property.

Note that the time limit for this problem is 0.2 seconds. Please try to write a very efficient algorithm and implementation.

----------------------------------------------------------------------------------

No doubt an excellent problem ... At first, I assumed the problem is a permutation of the FIRST n integers seeing the word permutation ... Here's that solution. 
It's O(1) memory.

    for(i = 1; i <= length_of_permutation; i++)
    {
        scanf("%d", &number_i);
        if(number_i != i && number_i + 1 != i && number_i != i + 1)
           almost_sorted = false;
    }

    printf(almost_sorted ? "YES\n" : "NO\n");

-----------------------------------------------------------

But, the question actually allows any set of numbers. So, you have to make use of the remarkable fact that it's possible to check if an array is sorted in O(n) time.

1. Go through the array. Compare A[i] and A[i-1], if, A[i] < A[i-1], swap them.
	 Maintain an auxiliary boolean array that keeps track of whether an element has been swapped once.
	 B[i] = true, if the position i has already seen one swap and false otherwise.

	This works because if there has been a swap, then some element has already moved one space

2. If an element has already been swapped once, then we can't sort it again. 

	For example - 3 1 2 -> 1 3 2 ... Now while comparing 2 and 3 we can't swap even though they're out of order because we have already swapped them.

3. Check if the array is sorted after doing this. 

	This is an easy step to miss ... However, consider this.

	1 2 50 100 25  ... After first two steps, it becomes 1 2 50 4 100 ... No element has been swapped more than once, but the array is not sorted. So, check if it's
	sorted.

It takes two loops - O(n)

------------------------------------------------------------------
   
   moved_once[MAX_LENGTH] = {false};

   for(i = 1; i < length_of_permutation; i++)
    {
        if(permutation[i] < permutation[i - 1])
        {
            if(moved_once[i - 1] == true)
            {
                almost_sorted = false; break;
            }
            else
            {
                swap(permutation[i], permutation[i-1]);
                moved_once[i] = moved_once[i-1] = true;
            }
        }
    }

    //Checking if array is sorted
    for(i = 1; i < length_of_permutation; i++)
    {
        if(permutation[i] < permutation[i - 1])
        {
            almost_sorted = false; break;
        }
    }

    printf(almost_sorted ? "YES\n" : "NO\n");