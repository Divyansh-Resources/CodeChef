Chef is a well known programmer. He owns a brand new Android phone of screen size of dimension n × m (n denotes the height of the phone and m denotes the width).
 Chef wants to design a program for painting the screen. He figured out c colors, which he will use to paint the screen. 
He wants to paint some rectangular section of pixels of the screen each with different color. Also Chef would like to use all of his c colors in painting.

Can you help Chef in finding number of different dimensions of rectangular section he can paint? 
In other words, find number of pairs x, y such that Chef can paint a rectangular section of dimension x × y (x denotes height, y denotes width) on the screen.
 Please note that Chef uses a fix orientation of his phone and is not allowed to rotate it, i.e. height always stays n and width always stays m and not the other way around.

-------------------------------------------------------

Not very clear. The question asks for the number of ordered pairs (x, y) such that xy = K, x <= W and y <= H

--------------------

I did two solutions

This is O(W). ... For xy = K, iterate over x = 1 to W, and check if x divides K. If it does, check if y is less than H

for(x = 1; x <= width; x++)
    {
        if(area%x == 0 && area/x <= height)
        {
            no_of_pairs++;
        }
    }

-------------------------------------

Factorisation - O(sqrt(K)) ... The divisors of K can be found in sqrt K time ... Just find divisors and check the inequalities. This turned out to be faster. 

   for(i = 1; i*i <= area; i++)
    {
        if(area%i == 0)
        {
            if(i*i == area)
            {
                if(i <= width  && i <= height)
                    no_of_pairs++;
            }
            else
            {
                if(i <= width && area/i <= height) //(x, y)
                    no_of_pairs++;
                if(i <= height && area/i <= width) //(y, x)
                    no_of_pairs++;
            }
        }
    }

The case i, i needs to be dealt with seperately because we only check it once .. Not twice. 