Little Egor likes to play with positive integers and their divisors. 
Bigger the number to play with, more the fun! The boy asked you to come up with an algorithm, that could play the following game:

Let's define f(n) as the sum of all odd divisors of n. I.e. f(10) = 1 + 5 = 6 and f(21) = 1 + 3 + 7 + 21 = 32. 
The game is to calculate f(l) + f(l + 1) + ... + f(r - 1) + f(r) for the given integers l and r.

Have fun! But be careful, the integers might be quite big.

--------------------------------------------------------------------------

There's no need to factorise each integer.

Instead, count the number of appearances of each odd divisor in between l and r. This is,

r/i - (l-1)/i

Each appearance contributes i to the sum.

This is like two way counting. Imagine f(l), f(l + 1), f(l + 2) ... f(r) are written down one after the other in new lines. 
The question is asking us to evaluate each row and then add them up.

This would mean going from i = 1 to l, and then checking if i divides l and if i is odd

for(x = l; x <= r; x++)
	for(i = 1; i <= x; i+=2)
		if(i divides x)
			sum = sum + i

This has two loops.

However, it is much easier to calculate the sum column-wise. Count the number of appearances of each odd divisors in the range.

    for(odd_number = 1; odd_number <= right; odd_number += 2)
    {
        no_of_appearances_of_odd_divisor = right/odd_number - (left - 1)/odd_number;
        sum += no_of_appearances_of_odd_divisor*odd_number;
    }

This has only one loop and is more efficient.
