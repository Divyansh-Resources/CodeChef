Recently Chef learned about Longest Increasing Subsequence. To be precise, he means longest strictly increasing subsequence, when he talks of longest increasing subsequence. 
To check his understanding, he took his favorite n-digit number and for each of its n digits, 
he computed the length of the longest increasing subsequence of digits ending with that digit. Then he stored these lengths in an array named LIS.
For example, let us say that Chef's favourite 4-digit number is 1531, then the LIS array would be [1, 2, 2, 1]. 
The length of longest increasing subsequence ending at first digit is 1 (the digit 1 itself) and at the second digit is 2 ([1, 5]), at third digit is also 2 ([1, 3]), 
and at the 4th digit is 1 (the digit 1 itself).
Now Chef wants to give you a challenge. He has a valid LIS array with him, and wants you to find any n-digit number having exactly the same LIS array? 
You are guaranteed that Chef's LIS array is valid, i.e. there exists at least one n-digit number corresponding to the given LIS array.

-----------------------------------------------------

This question is tricky.

First notice that the sequence given is a valid one. If the position at the i-th digit is k, then there must be a position smaller than i which has k-1, 
and a smaller index which has k-2, and a smaller one with k-3, and so on ...

For example, if the sequence is 12322453 ... There is an index with 5, so there must be a smaller index with 4, and a smaller one with 3 and smaller with 2. .. 1 at the 
beginning.

The simplest way of answering this is to output the sequence itself ! If i-th digit is p, then it means there is a sequence 1, 2, ... p-2, p-1, p ending at i. 

This automatically satisfies the property.

for(int i = 1; i <= no_of_terms; i++)
    {
        int sequence_term;
        scanf("%d", &sequence_term);
        printf("%d",sequence_term);
    }
    printf("\n");