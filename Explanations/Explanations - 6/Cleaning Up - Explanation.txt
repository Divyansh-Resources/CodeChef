After a long and successful day of preparing food for the banquet, it is time to clean up. There is a list of n jobs to do before the kitchen can be closed for the night. 
These jobs are indexed from 1 to n. 
Most of the cooks have already left and only the Chef and his assistant are left to clean up. 
Thankfully, some of the cooks took care of some of the jobs before they left so only a subset of the n jobs remain. 
The Chef and his assistant divide up the remaining jobs in the following manner. 
The Chef takes the unfinished job with least index, the assistant takes the unfinished job with the second least index, 
the Chef takes the unfinished job with the third least index, etc. 
That is, if the unfinished jobs were listed in increasing order of their index then the Chef would take every other one starting with the first job 
in the list and the assistant would take every other one starting with the second job on in the list. 
The cooks logged which jobs they finished before they left. Unfortunately, these jobs were not recorded in any particular order. 
Given an unsorted list of finished jobs, you are to determine which jobs the Chef must complete and which jobs his assitant 
must complete before closing the kitchen for the evening. 

----------------------------------------------------------------------------

It's a very simple question by itself, but it's important because it's the first question I used for C++ vectors.

Learnt quite a lot.

How to declare a vector.
How to initilise a vector. The constructor should be called ... Not = operator.
Bool vectors are not part of standard C implementation ... Implement bool vectors by int vectors.
Accessing the elements of a vector using [], (The unsafe way but that's okay because I'm doing bound checking and wouldn't want bound checking on every access.)

I didn't use push back or any of the other vector functions yet ... 
But from now on, I will try to use vectors whenever possible. Much better than statically allocating 10^5 or 10^6 bytes of memory for an array 
or the confusion that comes with dynamic allocation of pointers.

Vectors have the simplicity of arrays and the adaptibility of pointers.

-------------------------------------------------------------------------

    vector <int> completed_jobs(number_of_jobs + 1, false);
    vector <int> remaining_jobs(number_of_incomplete_jobs + 1);

    for(i = 1; i <= number_of_complete_jobs ; i++)
    {
        scanf("%d", &job_i);

        completed_jobs[job_i] = true;
    }

    for(i = 1; i <= number_of_jobs; i++)
        if(completed_jobs[i] == false)
            remaining_jobs[remaining_job_counter++] = i;

    //Chef's Jobs
    for(i = 1; i <= number_of_incomplete_jobs ; i += 2)
        printf("%d ", remaining_jobs[i]);

    printf("\n");

    //Assistant
    for(i = 2; i <= number_of_incomplete_jobs; i += 2)
        printf("%d ", remaining_jobs[i]);

    printf("\n");