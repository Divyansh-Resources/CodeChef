Little chef has just been introduced to the world of numbers! 
While experimenting with addition and multiplication operations, the little chef came up with the following problem:

Given an array A of non-negative integers, how many pairs of indices i and j exist such that A[i]*A[j] > A[i]+A[j] where i < j .
Now being a learner, little chef isn't able to solve this problem efficiently and hence turns to you for help. 

------------------------------------------------------------------

The only numbers who's product is not greater than their product is 0 and 1. (No need to worry about negative numbers.)

Count the number of non 0 and non 1 numbers ... = N, 
Answer is N choose 2, 

This was wrong because I overlooked the equality case ... when both are equal to 2. 2*2 = 2+ 2,

So, if N2 is the number of 2s, subtract N2 choose 2, from N choose 2 ..

The case where the array only consists of 2s is a special case. (No such pair is possible ... Answer is 0)

-------------------------------------------

    for(i = 1; i <= number_of_elements; i++)
    {
        scanf("%d", &number_i);
        number_of_greater_than_1 += (number_i > 1);
        number_of_2 += (number_i == 2);
    }

    if(number_of_2 == number_of_greater_than_1)
        no_of_pairs = 0;
    else
        no_of_pairs = (number_of_greater_than_1*1LL*(number_of_greater_than_1 - 1) )/2 - (number_of_2*1LL*(number_of_2 - 1) )/2;

    printf("%lld\n", no_of_pairs);