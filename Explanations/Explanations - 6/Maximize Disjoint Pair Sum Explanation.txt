Given an array of N numbers, a pair of numbers is called good if difference between the two numbers is strictly less than D.
Find out maximum possible sum of all good disjoint pairs that can be made from these numbers.
Sum of X pairs is the sum of all 2*X numbers in the pairs.

----------------------------------------------------------------

One way of doing this is to sort it and then notice that A(n) has to be paired off to A(n-1) best choice and go down the array ...
Another way of doing this is by DP.

Let f(i) be the maximum sum possible with the first i elements.

There are two possibilities with the i-th element. Either it is paired to element i-1, or it isn't...

f(i) = max{f(i-1) + A(i) + A(i - 1), f(i - 2)} ... Depending on the choice.

---------------------------------------------------

   sort(elements + 1, elements + no_of_elements + 1);

    max_sum_upto[0] = max_sum_upto[1] = 0;
    for(i = 2; i <= no_of_elements; i++)
    {
        max_sum_upto[i] = max_sum_upto[i - 1];

        if(elements[i] - elements[i - 1] < difference)
            max_sum_upto[i] = max(max_sum_upto[i - 2] + elements[i] + elements[i - 1], max_sum_upto[i - 1]);
    }

    printf("%lld\n",max_sum_upto[no_of_elements]);

-----------------------------------------------------

I was getting a WA because I didn't use sort right ... I used 1 indexing to read the array and I hadn't made the change while calling the sort function.