Let the prices be p[1] < p[2] < p[3] ... < p[n] 
in descending order. 

Now, if the price is set at P, we can sell it to all many i, such that p[i] >= P.

I will now prove that at the optimal value, P is always in the array.

Let us assume the opposite. 

Let P be in between p[i] < P < p[i + 1]

NOw, the total revenue is P*(n - (i + 1))

However, we can increase the price up to p[i + 1] and sell it to the same number of people 

Now, profit = p[i + 1]*(n - (i + 1))

We have now got a greater profit. This proves that we can always get a greater profit when P is in the array {p[1], p[2], ... p[n]} than when it is not.

Check the profit gained by setting P = each p[i].

--------------------------------------------------

#define all(v) (v).begin() + 1, (v).end()
using namespace std;

int main()
{
    int no_of_phones;
    scanf("%d", &no_of_phones);

    vector <int> price(no_of_phones + 1, 0);
    for(int i = 1; i <= no_of_phones; i++)
        scanf("%d", &price[i]);

    sort(all(price));

    long long total_money = 0;
    for(int i = 1; i <= no_of_phones; i++)
        total_money = max(total_money, price[i]*1LL*(no_of_phones - i + 1));

    printf("%lld\n", total_money);
    return 0;
}
